*grayout.txt* Highlighting inactive C/C++/Obj-C preprocessor regions

==============================================================================
CONTENTS                                                    *grayout-contents*

  1. Introduction...................|grayout-introduction|
  2. Changelog......................|grayout-changelog|
  3. Related Work...................|grayout-related-work|
  4. Requirements...................|grayout-requirements|
  5. Commands.......................|grayout-commands|
  6. Configuration..................|grayout-config|
    6.1 Example Configuration.......|grayout-example-configuration|
    6.2 Variables...................|grayout-variables|
    6.3 Compile Flags...............|grayout-compile-flags|
    6.4 Colors......................|grayout-colors|
  7. Contributing...................|grayout-contributing|
  8. Todo...........................|grayout-todo|
  9. References.....................|grayout-references|


==============================================================================
INTRODUCTION                                            *grayout-introduction*

`grayout.vim` is a vim plugin that grays out inactive C/C++/Obj-C preprocessor
regions using libclang.
In addition to custom config files, it also supports `compile_commands.json`
compilation databases, allowing quick and easy project setup.
Even though it is intended to be used with C/C++/Obj-C, it should work
with all filetypes, as long as the `-x <language>` flag is set.

It was only tested on Linux but should theoretically work on other platforms,
too.


==============================================================================
CHANGELOG                                                  *grayout-changelog*

- 20. April 2020:
  The plugin was rewritten from scratch and now uses libclang.

  Note: If you have been using this plugin before, please read the docs again,
  as many things changed in the new version.

- 5. March 2016:
  Initial release


==============================================================================
RELATED WORK                                            *grayout-related-work*

There are some other plugins providing similar functionality, but in different
ways.

- `ifdef highlighting` [1] adds static vim syntax rules for each manually
  defined macro. It does not make use of a compiler and requires the user to
  manually specify which macros are defined, thus being rather unflexible and
  often fails to properly detect skipped regions.

- `DyeVim` [2] integrates with (a custom fork of) YouCompleteMe [3] to
  retrieve extended syntax information for semantic highlighting, including
  skipped preprocessor regions. However, it only works with YCM's libclang
  completer, not the newer and more advanced clangd completer.

- `vim-lsp-inactive-regions` [4] integrates with vim-lsp [5] and uses the
  `cquery` [7] or `ccls` [8] language server to retrieve skipped preprocessor
  regions.

- `vim-lsp-cxx-highlight` [6] integrates with various LSP plugins and uses the
  `cquery` [7] or `ccls` [8] language server to provide full semantic
  highlighting, including skipped preprocessor regions.

Therefore, if you are using LSP for completion or syntax checking, you should
try `vim-lsp-cxx-highlight` [6] with `ccls` [8].  Otherwise, this plugin is
probably the best choice.


==============================================================================
REQUIREMENTS                                            *grayout-requirements*

- Vim 8.1+ or Neovim
- Python 3
- Clang


==============================================================================
COMMANDS                                                    *grayout-commands*

:GrayoutUpdate                                                *:GrayoutUpdate*
        Reparse the current file and update grayout highlighting.

:GrayoutClear                                                  *:GrayoutClear*
        Clear all grayout highlights from current buffer.

:GrayoutClearCache                                        *:GrayoutClearCache*
        Clear the compile command cache, forcing to reload all config files
        when needed.
        This is useful if you want to reload your compile flags related
        configs.

:GrayoutShowArgs                                            *:GrayoutShowArgs*
        Print the current file's compile flags.


==============================================================================
CONFIGURATION                                                 *grayout-config*

EXAMPLE CONFIGURATION                          *grayout-example-configuration*
---------------------
>
    " Bind :GrayoutUpdate to F5
    nnoremap <F5> :GrayoutUpdate<CR>

    " Run GrayoutUpdate when opening and saving a buffer
    autocmd BufReadPost,BufWritePost * if &ft == 'c' || &ft == 'cpp' || &ft == 'objc' | exec 'GrayoutUpdate' | endif

    " This can cause lag in more complex files.
    autocmd CursorHold,CursorHoldI * if &ft == 'c' || &ft == 'cpp' || &ft == 'objc' | exec 'GrayoutUpdate' | endif
<


VARIABLES                                                  *grayout-variables*
---------

g:grayout_default_args                                *g:grayout_default_args*
        Default: [ '-x', 'c++', '-std=c++11' ]

        Set default compile flags. These are used, when no
        |compile_commands.json| or |.grayout.conf| file was found.
        See also |grayout-compile-flags|.

        It is recommended to specify `-x <language>` in order to avoid
        ambiguity, especially with header files.

        Note: If you change this variable at runtime, you might need to run
        |:GrayoutClearCache| in order to reload it.

g:grayout_libclang_path                              *g:grayout_libclang_path*
        Default: ''

        Set libclang searchpath. This should point to the directory containing
        `libclang.so`. Leave empty to auto-detect.

g:grayout_debug                                              *g:grayout_debug*
        Default: 0

        Enable to print debug messages inside vim.

g:grayout_debug_logfile                              *g:grayout_debug_logfile*
        Default: 0

        Enable to write debug messages to `grayout.log`.


COMPILE FLAGS                                          *grayout-compile-flags*
-------------

As with every compiler, clang needs to know your project's compile flags to
compile your code.
There are three ways of defining compile flags, that are prioritized in the
respective order.
Note: If you make any changes related to compile flags at runtime, you will
need to run |:GrayoutClearCache| in order to reload those configs.

                                                       *compile_commands.json*
Compilation Database~

This is the recommended approach.
Instruct your build system to generate a `compile_commands.json` and symlink
or move it to your project root.

A compilation database [9] contains information on how to compile each
translation unit. It can be auto-generated by build systems like cmake, or
tools like Bear [10] or compdb [11].

For example, using cmake, add this line to your `CMakeLists.txt`:
>
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
<

                                                               *.grayout.conf*
.grayout.conf~

Create a `.grayout.conf` file in your project root containing the compile
flags. Linebreaks are ignored.
It is recommended to specify `-x <language>` in order to avoid ambiguity,
especially with header files.

Example:
>
    -x c
    -DENABLE_FEATURE_X
    -DANOTHER_FLAG
    -DSOME_CONSTANT=42
<

                                                        *grayout-default-args*
g:grayout_default_args~

The global |g:grayout_default_args| variable holds a list of compile flags and
is used when no other configs were found.
It is recommended to specify `-x <language>` in order to avoid ambiguity,
especially with header files.

Example:
>
    let g:grayout_default_args = [ '-x', 'c++', '-std=c++11', '-DFOOBAR_MACRO' ]
<


COLORS                                                        *grayout-colors*
------

If you don't like the default colors for grayouts, you can change them by
altering the `PreprocessorGrayout` style.
By default it links to the `Comment` style.

Example:
>
    highlight PreprocessorGrayout cterm=italic ctermfg=DarkGray gui=italic guifg=#6c6c6c
<


==============================================================================
CONTRIBUTING                                            *grayout-contributing*

If you encounter any bugs or problems, please make sure to read the docs. If
the problem persists, open a new issue on Github. Remember to add
`let g:grayout_debug_logfile = 1` to your vimrc and attach the `grayout.log`
logfile to your issue.

Pull requests are welcome.


==============================================================================
TODO                                                            *grayout-todo*

- Support `textprops` or `nvim_buf_add_highlight`
- Fix edge case where consecutive active if/elif/else lines are grayed out
  when their contents are inactive


==============================================================================
REFERENCES                                                *grayout-references*

[1]: http://www.vim.org/scripts/script.php?script_id=7
[2]: https://github.com/davits/DyeVim
[3]: https://github.com/ycm-core/YouCompleteMe
[4]: https://github.com/krzbe/vim-lsp-inactive-regions
[5]: https://github.com/prabirshrestha/vim-lsp
[6]: https://github.com/jackguo380/vim-lsp-cxx-highlight
[7]: https://github.com/cquery-project/cquery
[8]: https://github.com/MaskRay/ccls
[9]: http://clang.llvm.org/docs/JSONCompilationDatabase.html
[10]: https://github.com/rizsotto/Bear
[11]: https://github.com/Sarcasm/compdb


vim:tw=78:ts=8:ft=help:norl:
